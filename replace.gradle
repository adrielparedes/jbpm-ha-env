
// gradle -b replace.gradle -q updateWar

// def targetFolder = "/data/dev/workspace/redhat/bsig-dev/kie-wb-distributions/business-central-parent/business-central-distribution-wars/business-central/target";
// def targetFolder = "/home/paulo/projects/redhat/forks-HA/kie-wb-distributions/business-central-parent/business-central-distribution-wars/business-central/target";
def targetFolder = "/data/dev/docker-scripts/jenkins/data/workspace/HA/business-central-parent/business-central-distribution-wars/business-central/target"

def warName = "business-central-7.27.0-SNAPSHOT-eap7-redhat.war";

def m2 = "/home/aparedes/.m2/repository";
// def m2 = "/home/paulo/.m2/repository";

def libsFolder = "WEB-INF/lib";

def communityVersion  = "9.4.15.Final";
def rhdgVersion = "9.4.15.Final-redhat-00001";

def dependenciesToRemove = [
    "org/infinispan:infinispan-query-dsl:9.4.15.Final",
    "org/infinispan:infinispan-commons:9.4.15.Final",
    "org/infinispan:infinispan-remote-query-client:9.4.15.Final",
    "org/infinispan:infinispan-client-hotrod:9.4.15.Final"
]

def dependenciesToAdd = [
    "org/infinispan:infinispan-query-dsl:9.4.15.Final-redhat-00001",
    "org/infinispan:infinispan-commons:9.4.15.Final-redhat-00001",
    "org/infinispan:infinispan-remote-query-client:9.4.15.Final-redhat-00001",
    "org/infinispan:infinispan-client-hotrod:9.4.15.Final-redhat-00001"
]

def filesToReplace = []


task updateWar(){
    delete "./output";
    
    def originalWar = file("${targetFolder}/${warName}")
    def outputDir = file("./output/src")

    copy {
        from(zipTree(originalWar)) { 
            dependenciesToRemove.each { dep ->
                def depData = dep.split(":")
                exclude "WEB-INF/lib/${depData[1]}-${depData[2]}.jar"
            }
        }

        into outputDir
    }

    dependenciesToAdd.each { dep ->
        copy {
            def depData = dep.split(":")
            from "${m2}/${depData[0]}/${depData[1]}/${depData[2]}/${depData[1]}-${depData[2]}.jar"
            into "${outputDir}/WEB-INF/lib"
        }
    }

    filesToReplace.each { file ->
        copy {
            def fileData = file.split(":")
            from "${fileData[0]}"
            into "${outputDir}/${fileData[1]}"
        }
    }

    ant.war(update: "true", destfile: "./output/${warName}") {
         fileset(dir: outputDir)
    }
}
